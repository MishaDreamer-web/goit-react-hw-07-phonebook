{"version":3,"sources":["redux/contact-form/contact-form-actions.js","redux/contact-form/contact-form-operations.js","redux/contact-form/contact-form-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contact-form/contact-form-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","contactId","delete","then","catch","error","getContacts","state","contacts","items","getFilter","filter","getLoading","isLoading","getError","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","contactsSelectors","useDispatch","nameInputId","shortid","generate","numberInputId","handleChangeForm","e","target","value","resetForm","onSubmit","preventDefault","find","alert","trim","contactsOperations","id","type","placeholder","onChange","pattern","title","ContactListItem","onRemove","onClick","ContactsList","useEffect","length","map","Filter","App","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a04ecc5.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\n// pending\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\n// fulfilled\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\n// rejected\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\n\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contact-form-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nexport const deleteContact = contactId => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from 'redux/contact-form';\n\nimport shortid from 'shortid';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChangeForm = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    if (contacts.find(contact => contact.name === e.target.name.value)) {\n      alert(`${e.target.name.value} is already in contacts`);\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === e.target.number.value)) {\n      alert(`Number ${e.target.number.value} is already in contacts`);\n      return;\n    }\n\n    if ((!name || name.trim() === '') && (!number || number.trim() === '')) {\n      alert('Fill in the fields \"Name\" and \"Number\"');\n      return;\n    }\n\n    if (!name || name.trim() === '') {\n      alert('Field \"Name\" is empty');\n      return;\n    }\n\n    if (!number || number.trim() === '') {\n      alert('Field \"Number\" is empty');\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(name, number));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleChangeForm}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contact-form';\n\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number, onRemove }) => {\n  return (\n    <li>\n      {name}: {number} <button onClick={onRemove}>delete</button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nconst ContactsList = () => {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  const onRemove = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <>\n      {isLoading && <h1>Loading...</h1>}\n      {contacts.length === 0 && <p>There are no contacts in the list</p>}\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            name={name}\n            number={number}\n            onRemove={() => onRemove(id)}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contact-form/contact-form-actions';\nimport { contactsSelectors } from 'redux/contact-form';\n\nconst Filter = () => {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={e => dispatch(changeFilter(e.target.value))}\n      placeholder=\"Enter name for Search\"\n    />\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst App = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactsList />\n    </>\n  );\n};\n\nexport default App;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './contact-form-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, { payload }) => payload,\n  [fetchContactsRequest]: () => null,\n\n  [addContactError]: (_, { payload }) => payload,\n  [addContactRequest]: () => null,\n\n  [deleteContactError]: (_, { payload }) => payload,\n  [deleteContactRequest]: () => null,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  isLoading,\n  error,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\n\nimport contactsReducer from './contact-form/contact-form-reducer';\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}